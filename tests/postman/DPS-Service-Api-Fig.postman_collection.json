{
	"info": {
		"_postman_id": "7ba03519-98f5-4114-b64d-449e6bb5074e",
		"name": "DPS-Service-Api-Fig",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "figaro-locate-mathcing-applicants",
			"item": [
				{
					"name": "figLocateMatchingApplicants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65c85334-6585-44d3-ac0c-9b03c109f577",
								"exec": [
									"eval(pm.globals.get(\"commonTests\"))();",
									"",
									"const jsonResponse = xml2Json(responseBody);",
									"const respBodyObj = pm.expect(jsonResponse.locateMatchingApplicantsResponse);",
									"",
									"pm.test(\"Assert the responses for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\" === \"true\")) {",
									"        (respBodyObj.foundPartyId).to.be.a(int).and.not.to.be.empty;",
									"        (respBodyObj.foundSurname).to.eql(pm.iterationData.get('applSurname'));",
									"        (respBodyObj.firstName).to.eql(pm.iterationData.get('applFirstName'));",
									"        (respBodyObj.foundBirthDate).to.eql(pm.iterationData.get('applBirthDate'));",
									"        (respBodyObj.foundDriversLicence).to.be.a(int).and.not.to.be.empty;",
									"        (respBodyObj.foundBirthPlace).to.eql(pm.iterationData.get('applBirthPlace'));",
									"        (respBodyObj.genderfoundGenderTxt).to.eql(pm.iterationData.get('applGenderTxt'));",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respCode).to.eql(\"1\");",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respMsg).to.include(\"Success - found Party Id\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the response for invalid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"false\") {",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respCode).to.eql(\"0\");",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respMsg).to.eql(\"No matches found - new Applicant will be created in FIGARO.\");",
									"    }",
									"});",
									"        ",
									"pm.test(\"Assert the response for failed request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"fail\") {",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respMsg).to.eql(\"F\");",
									"    }",
									"});",
									"  ",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46f2fa17-349f-4b8e-a675-470de403812d",
								"exec": [
									"pm.environment.set(\"baseUrl\", 'http://localhost:5050');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/locateMatchingApplicants?applSurname={{applSurname}}&applFirstName={{applFirstName}}&applBirthDate={{applBirthDate}}&applBirthPlace={{applBirthPlace}}&applGenderTxt={{applGenderTxt}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"locateMatchingApplicants"
							],
							"query": [
								{
									"key": "applSurname",
									"value": "{{applSurname}}"
								},
								{
									"key": "applFirstName",
									"value": "{{applFirstName}}"
								},
								{
									"key": "applBirthDate",
									"value": "{{applBirthDate}}"
								},
								{
									"key": "applBirthPlace",
									"value": "{{applBirthPlace}}"
								},
								{
									"key": "applGenderTxt",
									"value": "{{applGenderTxt}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-applicant-service",
			"item": [
				{
					"name": "figValidateApplicantService",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "683afee9-3f17-4bbe-a25e-ac2bab22ce32",
								"exec": [
									"eval(pm.globals.get(\"commonTests\"))();",
									"",
									"const jsonResponse = xml2Json(responseBody);    ",
									"",
									"pm.test(\"Assert the responses for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"true\") {",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.validationResult).to.eql('P');",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respCode).to.eql('0');",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respMsg).to.eql('Validation passed.');",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the responses for a invalid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"false\") {",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.validationResult).to.eql('F');",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respCode).to.eql('-1');",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the responses for a valid request with correct format\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'trueFormat') {",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.validationResult).to.eql('F');",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respCode).not.to.be.empty;",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respMsg).to.include('Validation Failure:');",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the response for Party id not for an individual\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notIndividual') {",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respCode).to.eql(\"-22\");",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID \");",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.validationResult).to.eql(\"F\");",
									"    }",
									"});",
									" ",
									"pm.test(\"Assert the response for party id not found\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notFound') {",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respCode).to.eql(\"-21\");",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID\");",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.validationResult).to.eql(\"F\");",
									"    }",
									"});",
									"    ",
									"pm.test(\"Assert the response for org id not found\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noOrgId') {",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respCode).to.eql(\"-11\");",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.respMsg).to.include(\"Validation Failure: Organization Party ID\");",
									"        pm.expect(jsonResponse.ValidateApplicantServiceResponse.validationResult).to.eql(\"F\");",
									"    }",
									"});",
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateApplicantService?orgPartyId={{orgPartyID}}&applPartyId={{applPartyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateApplicantService"
							],
							"query": [
								{
									"key": "orgPartyId",
									"value": "{{orgPartyID}}"
								},
								{
									"key": "applPartyId",
									"value": "{{applPartyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-applicant-sharing",
			"item": [
				{
					"name": "figvalidateApplicantForSharing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cfee195-55d1-40af-b13c-d8b3fe4c0e72",
								"exec": [
									"eval(pm.globals.get(\"commonTests\"))();",
									"",
									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Party id is not found\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'notFound') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-21\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID\");",
									"    }",
									"});",
									"",
									"pm.test(\"No shreable results found\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'noResults') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.eql(\"Validation Failure: No shareable results found for the Applicant.\");",
									"    }",
									"});",
									"",
									"pm.test(\"No shreable results found\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'notIndividual') {",
									"       pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"       pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-22\");",
									"       pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"not for an Individual.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Invalid Jurisdiction Type\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'invalidJurs') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-33\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"Validation Failure: Invalid Jurisdiction Type\");",
									"    }",
									"});",
									"",
									"pm.test(\"Invalid data Type\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'inValidDataType') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"appl_party_id must be a number\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf634d16-54d6-4287-bf0c-b29400c73f83",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateApplicantForSharing?applPartyId={{applPartyId}}&jurisdictionType={{jurisdictionType}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateApplicantForSharing"
							],
							"query": [
								{
									"key": "applPartyId",
									"value": "{{applPartyId}}"
								},
								{
									"key": "jurisdictionType",
									"value": "{{jurisdictionType}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-applicant-id",
			"item": [
				{
					"name": "figValidateApplicantId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ff8098e-6668-46fa-8ac9-404fb550dc1f",
								"exec": [
									"eval(pm.globals.get(\"commonTests\"))();",
									"",
									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Assert the responses for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'true') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundSurname).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundFirstName).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundBirthDate).not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundDriversLicence).not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundBirthPlace).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundGenderTxt).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"0\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.eql(\"Party ID successfully validated.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Party id is not found\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notFound') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-21\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID\");",
									"    }",
									"});",
									"",
									"pm.test(\"No Applicant party Id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noPartyId') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-20\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.eql(\"Validation Failure: No Applicant Party ID provided.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Party ID is not for an individual\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notIndividual') {",
									"       pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-22\");",
									"       pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.include(\"not for an Individual.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Invalid data Type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'inValidDataType') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.include(\"appl_party_id must be a number\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "applPartyId",
								"value": "{{applPartyId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/figvalidationservice/validateApplicantPartyId?applPartyId={{applPartyId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"figvalidationservice",
								"validateApplicantPartyId"
							],
							"query": [
								{
									"key": "applPartyId",
									"value": "{{applPartyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}