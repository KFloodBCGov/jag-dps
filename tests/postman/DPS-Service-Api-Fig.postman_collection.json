{
	"info": {
		"_postman_id": "bc51c1c8-440e-4102-a33f-700b0bdf676b",

		"name": "DPS-Service-Api-Fig",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "figaro-locate-mathcing-applicants",
			"item": [
				{
					"name": "figLocateMatchingApplicants",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c84bf64-4066-42f4-89dd-9e4eb77bc47d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{

							"listen": "test",
							"script": {
								"id": "70096e9b-c94e-4a97-beb6-c21b2275b495",
								"exec": [

									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",

									"",
									"const jsonResponse = xml2Json(responseBody);",
									"",
									"pm.test(\"Assert the responses for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"true\") {",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundPartyId).to.not.be.null;",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundSurname).to.eql(pm.iterationData.get('applSurname'));",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundFirstName).to.eql(pm.iterationData.get('applFirstName'));",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundBirthDate).to.eql(pm.iterationData.get('applBirthDate'));",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundDriversLicence).to.not.be.null;",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundBirthPlace).to.eql(pm.iterationData.get('applBirthPlace'));",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.foundGenderTxt).to.eql(pm.iterationData.get('applGenderTxt'));",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respCode).to.eql(\"1\");",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respMsg).to.include(\"Success - found Party Id\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the response for invalid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"false\") {",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respCode).to.eql(\"0\");",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respMsg).to.eql(\"No matches found - new Applicant will be created in FIGARO.\");",
									"    }",
									"});",
									"        ",
									"pm.test(\"Assert the response for failed request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"fail\") {",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(jsonResponse.locateMatchingApplicantsResponse.respMsg).to.eql(\"F\");",
									"    }",
									"});",
									"  ",
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {

						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								}
							]
						},

						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/locateMatchingApplicants?applSurname={{applSurname}}&applFirstName={{applFirstName}}&applBirthDate={{applBirthDate}}&applBirthPlace={{applBirthPlace}}&applGenderTxt={{applGenderTxt}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"locateMatchingApplicants"
							],
							"query": [
								{
									"key": "applSurname",
									"value": "{{applSurname}}"
								},
								{
									"key": "applFirstName",
									"value": "{{applFirstName}}"
								},
								{
									"key": "applBirthDate",
									"value": "{{applBirthDate}}"
								},
								{
									"key": "applBirthPlace",
									"value": "{{applBirthPlace}}"
								},
								{
									"key": "applGenderTxt",
									"value": "{{applGenderTxt}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-applicant-service",
			"item": [
				{
					"name": "figValidateApplicantService",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be274da9-3c46-4ebb-bc90-ab3aefd22e1a",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",
									"const jsonResponse = xml2Json(responseBody);",
									"",
									"pm.test(\"Assert the responses for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"true\") {",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.validationResult).to.eql('P');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respCode).to.eql('0');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respMsg).to.eql('Validation passed.');",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the responses for a invalid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === \"false\") {",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.validationResult).to.eql('F');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respCode).to.eql('-1');",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the responses for a valid request with correct format\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'trueFormat') {",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.validationResult).to.eql('F');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respCode).not.to.be.empty;",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respMsg).to.include('Validation Failure:');",
									"    }",
									"});",
									"",
									"pm.test(\"Assert the response for Party id not for an individual\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notIndividual') {",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respCode).to.eql('-22');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID \");",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.validationResult).to.eql(\"F\");",
									"    }",
									"});",
									" ",
									"pm.test(\"Assert the response for party id not found\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noPartyId') {",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respCode).to.eql('-20');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respMsg).to.include(\"Validation Failure: No Applicant Party ID provided.\");",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.validationResult).to.eql(\"F\");",
									"    }",
									"});",
									"    ",
									"pm.test(\"Assert the response for org id not found\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noOrgId') {",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respCode).to.eql('-11');",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.respMsg).to.include(\"Validation Failure: Organization Party ID\");",
									"        pm.expect(jsonResponse.validateApplicantServiceResponse.validationResult).to.eql(\"F\");",
									"    }",
									"});",
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateApplicantService?orgPartyId={{orgPartyID}}&applPartyId={{applPartyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateApplicantService"
							],
							"query": [
								{
									"key": "orgPartyId",
									"value": "{{orgPartyID}}"
								},
								{
									"key": "applPartyId",
									"value": "{{applPartyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-applicant-sharing",
			"item": [
				{
					"name": "figvalidateApplicantForSharing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cfee195-55d1-40af-b13c-d8b3fe4c0e72",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",
									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Party id is not found\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'notFound') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-21\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID\");",
									"    }",
									"});",
									"",
									"pm.test(\"No shreable results found\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'noResults') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.eql(\"Validation Failure: No shareable results found for the Applicant.\");",
									"    }",
									"});",
									"",
									"pm.test(\"No shreable results found\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'notIndividual') {",
									"       pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"       pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-22\");",
									"       pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"not for an Individual.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Invalid Jurisdiction Type\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'invalidJurs') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-33\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"Validation Failure: Invalid Jurisdiction Type\");",
									"    }",
									"});",
									"",
									"pm.test(\"Invalid data Type\", () => {",
									"    if(pm.iterationData.get(\"resp\") === 'inValidDataType') {",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.validationResult).to.eql(\"F\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(respJson.ValidateApplicantForSharingResponse.respMsg).to.include(\"appl_party_id must be a number\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateApplicantForSharing?applPartyId={{applPartyId}}&jurisdictionType={{jurisdictionType}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateApplicantForSharing"
							],
							"query": [
								{
									"key": "applPartyId",
									"value": "{{applPartyId}}"
								},
								{
									"key": "jurisdictionType",
									"value": "{{jurisdictionType}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-applicant-id",
			"item": [
				{
					"name": "figValidateApplicantId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ff8098e-6668-46fa-8ac9-404fb550dc1f",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",

									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",
									"pm.test(\"Assert the responses for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'true') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundSurname).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundFirstName).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundBirthDate).not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundDriversLicence).not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundBirthPlace).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.foundGenderTxt).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"0\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.eql(\"Party ID successfully validated.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Party id is not found\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notFound') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-21\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.include(\"Validation Failure: Applicant Party ID\");",
									"    }",
									"});",
									"",
									"pm.test(\"No Applicant party Id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noPartyId') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-20\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.eql(\"Validation Failure: No Applicant Party ID provided.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Party ID is not for an individual\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'notIndividual') {",
									"       pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-22\");",
									"       pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.include(\"not for an Individual.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Invalid data Type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'inValidDataType') {",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respCode).to.eql(\"-1\");",
									"        pm.expect(respJson.ValidateApplicantPartyIdResponse.respMsg).to.include(\"appl_party_id must be a number\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4fa11171-583e-44f8-9d81-8eaa6196b7c2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}

						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateApplicantPartyId?applPartyId={{applPartyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateApplicantPartyId"
							],
							"query": [
								{
									"key": "applPartyId",
									"value": "{{applPartyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-orgParty",
			"item": [
				{
					"name": "figValidateOrgParty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab3ef518-de5f-435b-bbab-691b148593a9",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",
									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Assert response for a valid org party id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'validParty') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('P');",
									"        pm.expect(respJson.validateOrgPartyResponse.foundOrgPartyId).to.eql(pm.iterationData.get('orgPartyId'));",
									"        pm.expect(respJson.validateOrgPartyResponse.foundOrgName).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.validateOrgPartyResponse.foundOrgType).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('0');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"Successfully matched Party ID \");",
									"    ",
									"    const contact =  respJson.validateOrgPartyResponse.contactPersons;",
									"    ",
									"        if(contact.length > 1) {",
									"            for(let i =0; i < contact.length; i ++) {",
									"                pm.expect(contact[i].contactPersonName).not.to.be.null;",
									"                pm.expect(contact[i].contactPernRole).not.to.be.null;",
									"                pm.expect(contact[i].contactPersonPartyId).not.to.be.null;",
									"            }",
									"        }",
									"   }",
									"});",
									"",
									"pm.test(\"Assert response for a invalid org party id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'inValidParty') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('1');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"was not found\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for a not for an Organization party id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noAnOrganisation') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('-100');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"is not for an Organization\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for incorrect data type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'string') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('-1');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.eql(\"org_party_id must be a number\");",
									"        ",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f77c7ad-e00f-4a1b-b34b-01501d9ecbe6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},

						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateOrgParty?orgPartyId={{orgPartyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateOrgParty"
							],
							"query": [
								{
									"key": "orgPartyId",
									"value": "{{orgPartyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "figValidateWithoutOrgParty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0aac342-8889-4b0d-bc7f-ca2234aa0507",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",
									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Assert response for a valid org party id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'validParty') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('P');",
									"        pm.expect(respJson.validateOrgPartyResponse.foundOrgPartyId).to.eql(pm.iterationData.get('orgPartyId'));",
									"        pm.expect(respJson.validateOrgPartyResponse.foundOrgName).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.validateOrgPartyResponse.foundOrgType).to.be.a('string').and.not.to.be.empty;",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('0');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"Successfully matched subnames \");",
									"    ",
									"    const contact =  respJson.validateOrgPartyResponse.contactPersons;",
									"    ",
									"        if(contact.length > 1) {",
									"            for(let i =0; i < contact.length; i ++) {",
									"                pm.expect(contact[i].contactPersonName).not.to.be.null;",
									"                pm.expect(contact[i].contactPernRole).not.to.be.null;",
									"                pm.expect(contact[i].contactPersonPartyId).not.to.be.null;",
									"            }",
									"        }",
									"   }",
									"});",
									"",
									"pm.test(\"Assert response for a invalid city\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'incorrectCity') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('2');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"Validation Failure: Provided Sub-names and City did not match any Organizations.\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for a invalid subname\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'incorrectSubName') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('2');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"Validation Failure: Provided Sub-names and City did not match any Organizations.\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for a request with multiple matches\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'multipleMatch') {",
									"        pm.expect(respJson.validateOrgPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgPartyResponse.respCode).to.eql('3');",
									"        pm.expect(respJson.validateOrgPartyResponse.respMsg).to.include(\"Validation Failure: Provided Sub-names and City matched multiple Organizations.\");",
									"        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateOrgParty?orgSubName1={{orgSubName1}}&orgSubName2={{orgSubName2}}&orgSubName3={{orgSubName3}}&orgSubName4={{orgSubName4}}&orgCity={{orgCity}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateOrgParty"
							],
							"query": [
								{
									"key": "orgSubName1",
									"value": "{{orgSubName1}}"
								},
								{
									"key": "orgSubName2",
									"value": "{{orgSubName2}}"
								},
								{
									"key": "orgSubName3",
									"value": "{{orgSubName3}}"
								},
								{
									"key": "orgSubName4",
									"value": "{{orgSubName4}}"
								},
								{
									"key": "orgCity",
									"value": "{{orgCity}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-facility-party",
			"item": [
				{
					"name": "figValidateFacilityParty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8ecd9d2-aa4a-4711-b3af-ec195e8f3a45",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Assert response for a valid facility party\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"true\") {",
									"        ",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('P');",
									"        pm.expect(respJson.validateFacilityPartyResponse.foundFacilityPartyId).to.eql(pm.iterationData.get('facilityPartyId'));",
									"        pm.expect(respJson.validateFacilityPartyResponse.foundFacilityName).to.eql(pm.iterationData.get('facilitySubName1'));",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('0');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.include(\"Successfully matched to one Facility.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response with invalid facility party\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"false\") {",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('2');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.eql(\"Validation Failure: Provided criteria did not match any Facilities.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response without subname parameter value\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"noSubName\") {",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('-10');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.eql(\"Validation Failure: No Party ID or Sub-Names were provided.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response with incorrect data for party id\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"dataType\") {",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('-1');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.eql(\"facility_party_id must be a number\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response with invalid subname but valid party id\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"dataType\") {",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('-1');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.eql(\"facility_party_id must be a number\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response with empty party id\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"emptyPartyId\") {",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('P');",
									"        pm.expect(respJson.validateFacilityPartyResponse.foundFacilityPartyId).to.be.a(\"string\").and.not.to.be.null;",
									"        pm.expect(respJson.validateFacilityPartyResponse.foundFacilityName).to.eql(pm.iterationData.get('facilitySubName1'));",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('0');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.include(\"Successfully matched to one Facility.\");",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for multiple matches\", () => {",
									"    ",
									"    if(pm.iterationData.get(\"isValid\") === \"multiMatch\") {",
									"        pm.expect(respJson.validateFacilityPartyResponse.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respCode).to.eql('3');",
									"        pm.expect(respJson.validateFacilityPartyResponse.respMsg).to.eql(\"Validation Failure: Provided criteria matched multiple Facilities.\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateFacilityParty?facilityPartyId={{facilityPartyId}}&facilitySubName1={{facilitySubName1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateFacilityParty"
							],
							"query": [
								{
									"key": "facilityPartyId",
									"value": "{{facilityPartyId}}"
								},
								{
									"key": "facilitySubName1",
									"value": "{{facilitySubName1}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fig-validate-org-drawdown-balance",
			"item": [
				{
					"name": "figValidateOrgDrawDownBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1493ea30-f926-4c03-b909-06b4bfa6b0f9",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",

									"const respJson = xml2Json(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");",
									"});",
									"",
									"pm.test(\"Assert response for a valid request\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'true') {",
									"        pm.expect(respJson.validateOrgDrawDownBalance.validationResult).to.eql('P');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respCode).to.eql('0');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respMsg).to.eql(\"Validation passed.\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for incorrect party id\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'incorrectPartyID') {",
									"        pm.expect(respJson.validateOrgDrawDownBalance.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respCode).to.eql('-11');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respMsg).to.include(\"was not found.\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for invalid schedule type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'invalidSchedule') {",
									"        pm.expect(respJson.validateOrgDrawDownBalance.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respCode).to.eql('-31');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respMsg).to.include(\"Validation Failure: Invalid Schedule Type\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for invalid Jurisdiction type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'invalidJurisdiction') {",
									"        pm.expect(respJson.validateOrgDrawDownBalance.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respCode).to.eql('-33');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respMsg).to.include(\"Validation Failure: Invalid Jurisdiction Code\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for no schedule type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noSchedule') {",
									"        pm.expect(respJson.validateOrgDrawDownBalance.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respCode).to.eql('-30');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respMsg).to.include(\"Validation Failure: No Schedule Type Code was submitted.\");",
									"        ",
									"    }",
									"});",
									"",
									"pm.test(\"Assert response for no Jurisdiction type\", () => {",
									"    if(pm.iterationData.get(\"isValid\") === 'noJurisdiction') {",
									"        pm.expect(respJson.validateOrgDrawDownBalance.validationResult).to.eql('F');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respCode).to.eql('-32');",
									"        pm.expect(respJson.validateOrgDrawDownBalance.respMsg).to.include(\"Validation Failure: No Jurisdiction Code was submitted.\");",
									"        ",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7ff7a56-a66d-4801-b025-a1c85f9fb755",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},

						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/figvalidationservice/validateOrgDrawDownBalance?orgPartyId={{orgPartyId}}&scheduleType={{scheduleType}}&jurisdictionType={{jurisdictionType}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"figvalidationservice",
								"validateOrgDrawDownBalance"
							],
							"query": [
								{
									"key": "orgPartyId",
									"value": "{{orgPartyId}}"
								},
								{
									"key": "scheduleType",
									"value": "{{scheduleType}}"
								},
								{
									"key": "jurisdictionType",
									"value": "{{jurisdictionType}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"protocolProfileBehavior": {}
}